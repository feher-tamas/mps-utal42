package Base.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BooleanType;
  private ConceptPresentation props_DateRangeType;
  private ConceptPresentation props_DateType;
  private ConceptPresentation props_FunctionArgumentDef;
  private ConceptPresentation props_FunctionDef;
  private ConceptPresentation props_GroupFunctionDef;
  private ConceptPresentation props_GroupFunctionLibrary;
  private ConceptPresentation props_IDListType;
  private ConceptPresentation props_INumericLiteral;
  private ConceptPresentation props_IStringLiteral;
  private ConceptPresentation props_Library;
  private ConceptPresentation props_MappingDataType;
  private ConceptPresentation props_NumberType;
  private ConceptPresentation props_StringType;
  private ConceptPresentation props_SzamfIdoszakType;
  private ConceptPresentation props_SzotarDef;
  private ConceptPresentation props_SzotarElemListType;
  private ConceptPresentation props_SzotarElemType;
  private ConceptPresentation props_SzotarListaDef;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BooleanType:
        if (props_BooleanType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("logikai");
          props_BooleanType = cpb.create();
        }
        return props_BooleanType;
      case LanguageConceptSwitch.DateRangeType:
        if (props_DateRangeType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("dátum intervallum");
          props_DateRangeType = cpb.create();
        }
        return props_DateRangeType;
      case LanguageConceptSwitch.DateType:
        if (props_DateType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("dátum");
          props_DateType = cpb.create();
        }
        return props_DateType;
      case LanguageConceptSwitch.FunctionArgumentDef:
        if (props_FunctionArgumentDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_FunctionArgumentDef = cpb.create();
        }
        return props_FunctionArgumentDef;
      case LanguageConceptSwitch.FunctionDef:
        if (props_FunctionDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_FunctionDef = cpb.create();
        }
        return props_FunctionDef;
      case LanguageConceptSwitch.GroupFunctionDef:
        if (props_GroupFunctionDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_GroupFunctionDef = cpb.create();
        }
        return props_GroupFunctionDef;
      case LanguageConceptSwitch.GroupFunctionLibrary:
        if (props_GroupFunctionLibrary == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_GroupFunctionLibrary = cpb.create();
        }
        return props_GroupFunctionLibrary;
      case LanguageConceptSwitch.IDListType:
        if (props_IDListType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ID lista");
          props_IDListType = cpb.create();
        }
        return props_IDListType;
      case LanguageConceptSwitch.INumericLiteral:
        if (props_INumericLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_INumericLiteral = cpb.create();
        }
        return props_INumericLiteral;
      case LanguageConceptSwitch.IStringLiteral:
        if (props_IStringLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IStringLiteral = cpb.create();
        }
        return props_IStringLiteral;
      case LanguageConceptSwitch.Library:
        if (props_Library == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Library = cpb.create();
        }
        return props_Library;
      case LanguageConceptSwitch.MappingDataType:
        if (props_MappingDataType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MappingDataType = cpb.create();
        }
        return props_MappingDataType;
      case LanguageConceptSwitch.NumberType:
        if (props_NumberType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("szám");
          props_NumberType = cpb.create();
        }
        return props_NumberType;
      case LanguageConceptSwitch.StringType:
        if (props_StringType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("szöveg");
          props_StringType = cpb.create();
        }
        return props_StringType;
      case LanguageConceptSwitch.SzamfIdoszakType:
        if (props_SzamfIdoszakType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("számf. időszak");
          props_SzamfIdoszakType = cpb.create();
        }
        return props_SzamfIdoszakType;
      case LanguageConceptSwitch.SzotarDef:
        if (props_SzotarDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SzotarDef = cpb.create();
        }
        return props_SzotarDef;
      case LanguageConceptSwitch.SzotarElemListType:
        if (props_SzotarElemListType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Szótár elem lista");
          props_SzotarElemListType = cpb.create();
        }
        return props_SzotarElemListType;
      case LanguageConceptSwitch.SzotarElemType:
        if (props_SzotarElemType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("szótár elem");
          props_SzotarElemType = cpb.create();
        }
        return props_SzotarElemType;
      case LanguageConceptSwitch.SzotarListaDef:
        if (props_SzotarListaDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SzotarListaDef = cpb.create();
        }
        return props_SzotarListaDef;
    }
    return null;
  }
}
