package DataMapping.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Objects;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class check_FormatAbstractItem_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_FormatAbstractItem_NonTypesystemRule() {
  }
  public void applyRule(final SNode formatAbstractItem, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(SNodeOperations.getParent(formatAbstractItem), CONCEPTS.FormatList$BB), LINKS.items$2tyy)).any((it) -> !(Objects.equals(it, formatAbstractItem)) && Objects.equals(SNodeOperations.getConcept(it), SNodeOperations.getConcept(formatAbstractItem)))) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(formatAbstractItem, "Duplikált formátum definíció: " + SConceptOperations.conceptAlias(SNodeOperations.getConcept(formatAbstractItem)), "r:2ccfac22-e537-4cc8-903d-e30f04953635(DataMapping.typesystem)", "1931238374027523817", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.FormatAbstractItem$CQ;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept FormatList$BB = MetaAdapterFactory.getConcept(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x4f15e479594ea35cL, "DataMapping.structure.FormatList");
    /*package*/ static final SConcept FormatAbstractItem$CQ = MetaAdapterFactory.getConcept(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x4f15e479594ea64fL, "DataMapping.structure.FormatAbstractItem");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink items$2tyy = MetaAdapterFactory.getContainmentLink(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x4f15e479594ea35cL, 0x4f15e479594eac83L, "items");
  }
}
