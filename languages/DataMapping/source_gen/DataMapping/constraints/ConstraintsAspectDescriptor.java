package DataMapping.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseConstraintsAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class ConstraintsAspectDescriptor extends BaseConstraintsAspectDescriptor {
  public ConstraintsAspectDescriptor() {
  }

  @Override
  public ConstraintsDescriptor getConstraints(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return new AttributePairRef_Constraints();
      case 1:
        return new IAttributeRef_Constraints();
      case 2:
        return new IParamRef_Constraints();
      case 3:
        return new JSONDataItem_Constraints();
      case 4:
        return new JSONMappingValueRef_Constraints();
      case 5:
        return new MappingDef_Constraints();
      case 6:
        return new MappingDefRef_Constraints();
      case 7:
        return new MappingValueRef_Constraints();
      case 8:
        return new ParameterMappingDef_Constraints();
      case 9:
        return new ParameterValueDef_Constraints();
      case 10:
        return new SourceDef_Constraints();
      case 11:
        return new SourceEntityRef_Constraints();
      case 12:
        return new ValueDef_Constraints();
      case 13:
        return new XMLDataItem_Constraints();
      case 14:
        return new XlsSection_Constraints();
      default:
    }
    return new BaseConstraintsDescriptor(concept);
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x3d4dcd080255f3adL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x49a403aa3321cb12L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x1c06662da7304013L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x6d9e20901ae527d3L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x6d9e20901ae69279L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x28099d21881a0754L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x26f4b9ad5a1f1af5L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x41fd2b6fb7964650L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x7bbd02202d2efecbL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x7bbd02202d7f1985L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x28099d21881b6885L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x28099d21881b7c6eL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x28099d21881a135cL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x41fd2b6fb78f5f48L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x34e1d43f312686c0L)).seal();
}
