package DataMapping.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbstractRenderingDef;
  private ConceptPresentation props_AbstractRenderingValue;
  private ConceptPresentation props_AttributePairRef;
  private ConceptPresentation props_CSVRenderingDef;
  private ConceptPresentation props_CharReplacement;
  private ConceptPresentation props_DateFilter;
  private ConceptPresentation props_DateFilterItem;
  private ConceptPresentation props_DateFormat;
  private ConceptPresentation props_DecimalSeparator;
  private ConceptPresentation props_DescriptionItem;
  private ConceptPresentation props_EmptyMappingDef;
  private ConceptPresentation props_EmptyValue;
  private ConceptPresentation props_FieldLengthItem;
  private ConceptPresentation props_FillChar;
  private ConceptPresentation props_FilterAbstractItem;
  private ConceptPresentation props_FilterAttributeRef;
  private ConceptPresentation props_FilterComment;
  private ConceptPresentation props_FilterDef;
  private ConceptPresentation props_FilterEmptyItem;
  private ConceptPresentation props_FilterEmptyRenderingDef;
  private ConceptPresentation props_FormatAbstractItem;
  private ConceptPresentation props_FormatCommentItem;
  private ConceptPresentation props_FormatEmptyItem;
  private ConceptPresentation props_FormatList;
  private ConceptPresentation props_FunctionRef;
  private ConceptPresentation props_GroupFunctionRef;
  private ConceptPresentation props_HRRelationFilter;
  private ConceptPresentation props_IAttributeRef;
  private ConceptPresentation props_IMappingDef;
  private ConceptPresentation props_IMappingExpression;
  private ConceptPresentation props_IMappingItem;
  private ConceptPresentation props_IParamRef;
  private ConceptPresentation props_IParameterMappingExpression;
  private ConceptPresentation props_IParameterMappingItem;
  private ConceptPresentation props_IValueDef;
  private ConceptPresentation props_IXlsAbstractValue;
  private ConceptPresentation props_JSONAbstractItem;
  private ConceptPresentation props_JSONArray;
  private ConceptPresentation props_JSONDataItem;
  private ConceptPresentation props_JSONFalse;
  private ConceptPresentation props_JSONMappingValueRef;
  private ConceptPresentation props_JSONNull;
  private ConceptPresentation props_JSONNumeric;
  private ConceptPresentation props_JSONObject;
  private ConceptPresentation props_JSONProperty;
  private ConceptPresentation props_JSONRenderingDef;
  private ConceptPresentation props_JSONStringLiteral;
  private ConceptPresentation props_JSONTrue;
  private ConceptPresentation props_MappingAttributeRef;
  private ConceptPresentation props_MappingCommentLine;
  private ConceptPresentation props_MappingDef;
  private ConceptPresentation props_MappingDefRef;
  private ConceptPresentation props_MappingEmptyItem;
  private ConceptPresentation props_MappingNumericLiteral;
  private ConceptPresentation props_MappingParamRef;
  private ConceptPresentation props_MappingStringLiteral;
  private ConceptPresentation props_MappingValueRef;
  private ConceptPresentation props_NullLiteral;
  private ConceptPresentation props_NumberOfDecimals;
  private ConceptPresentation props_NumericLiteral;
  private ConceptPresentation props_ParamAbstractItem;
  private ConceptPresentation props_ParamComment;
  private ConceptPresentation props_ParamEmptyLine;
  private ConceptPresentation props_ParamItem;
  private ConceptPresentation props_ParamListDef;
  private ConceptPresentation props_ParameterFunctionRef;
  private ConceptPresentation props_ParameterMappingDef;
  private ConceptPresentation props_ParameterValueDef;
  private ConceptPresentation props_RenderingDefComment;
  private ConceptPresentation props_RenderingList;
  private ConceptPresentation props_RenderingStringLiteral;
  private ConceptPresentation props_RoundingMethod;
  private ConceptPresentation props_SourceAbstractCondition;
  private ConceptPresentation props_SourceAbstractItem;
  private ConceptPresentation props_SourceAbstractValue;
  private ConceptPresentation props_SourceAttributeRef;
  private ConceptPresentation props_SourceComment;
  private ConceptPresentation props_SourceCondition;
  private ConceptPresentation props_SourceDateRangeCondition;
  private ConceptPresentation props_SourceDef;
  private ConceptPresentation props_SourceEmptyItem;
  private ConceptPresentation props_SourceEntityRef;
  private ConceptPresentation props_SourceNumericLiteral;
  private ConceptPresentation props_SourceParamRef;
  private ConceptPresentation props_SourceStringLiteral;
  private ConceptPresentation props_StringLiteral;
  private ConceptPresentation props_SzamfIdoszakFilter;
  private ConceptPresentation props_SzamfIdoszakFilterItem;
  private ConceptPresentation props_TXTRenderingDef;
  private ConceptPresentation props_Template;
  private ConceptPresentation props_TextAlignment;
  private ConceptPresentation props_ThousandSeparator;
  private ConceptPresentation props_TimeFormat;
  private ConceptPresentation props_ValueDef;
  private ConceptPresentation props_XLSRenderingDef;
  private ConceptPresentation props_XMLAttribute;
  private ConceptPresentation props_XMLDataItem;
  private ConceptPresentation props_XMLDocument;
  private ConceptPresentation props_XMLElement;
  private ConceptPresentation props_XMLElementContent;
  private ConceptPresentation props_XMLRenderingDef;
  private ConceptPresentation props_XMLValue;
  private ConceptPresentation props_XlsRow;
  private ConceptPresentation props_XlsSection;
  private ConceptPresentation props_XlsTemplatedRenderingDef;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractRenderingDef:
        if (props_AbstractRenderingDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractRenderingDef = cpb.create();
        }
        return props_AbstractRenderingDef;
      case LanguageConceptSwitch.AbstractRenderingValue:
        if (props_AbstractRenderingValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractRenderingValue = cpb.create();
        }
        return props_AbstractRenderingValue;
      case LanguageConceptSwitch.AttributePairRef:
        if (props_AttributePairRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AttributePairRef");
          props_AttributePairRef = cpb.create();
        }
        return props_AttributePairRef;
      case LanguageConceptSwitch.CSVRenderingDef:
        if (props_CSVRenderingDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CSV kimenet");
          props_CSVRenderingDef = cpb.create();
        }
        return props_CSVRenderingDef;
      case LanguageConceptSwitch.CharReplacement:
        if (props_CharReplacement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Karakter helyettesítés");
          props_CharReplacement = cpb.create();
        }
        return props_CharReplacement;
      case LanguageConceptSwitch.DateFilter:
        if (props_DateFilter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Dátum szűrés");
          props_DateFilter = cpb.create();
        }
        return props_DateFilter;
      case LanguageConceptSwitch.DateFilterItem:
        if (props_DateFilterItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DateFilterItem");
          props_DateFilterItem = cpb.create();
        }
        return props_DateFilterItem;
      case LanguageConceptSwitch.DateFormat:
        if (props_DateFormat == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Dátum formátum");
          props_DateFormat = cpb.create();
        }
        return props_DateFormat;
      case LanguageConceptSwitch.DecimalSeparator:
        if (props_DecimalSeparator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Tizedes elválasztó");
          props_DecimalSeparator = cpb.create();
        }
        return props_DecimalSeparator;
      case LanguageConceptSwitch.DescriptionItem:
        if (props_DescriptionItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Leírás");
          props_DescriptionItem = cpb.create();
        }
        return props_DescriptionItem;
      case LanguageConceptSwitch.EmptyMappingDef:
        if (props_EmptyMappingDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EmptyMappingDef = cpb.create();
        }
        return props_EmptyMappingDef;
      case LanguageConceptSwitch.EmptyValue:
        if (props_EmptyValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("üres");
          props_EmptyValue = cpb.create();
        }
        return props_EmptyValue;
      case LanguageConceptSwitch.FieldLengthItem:
        if (props_FieldLengthItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Mező hossz");
          props_FieldLengthItem = cpb.create();
        }
        return props_FieldLengthItem;
      case LanguageConceptSwitch.FillChar:
        if (props_FillChar == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Kitöltő karakter");
          props_FillChar = cpb.create();
        }
        return props_FillChar;
      case LanguageConceptSwitch.FilterAbstractItem:
        if (props_FilterAbstractItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_FilterAbstractItem = cpb.create();
        }
        return props_FilterAbstractItem;
      case LanguageConceptSwitch.FilterAttributeRef:
        if (props_FilterAttributeRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FilterAttributeRef");
          props_FilterAttributeRef = cpb.create();
        }
        return props_FilterAttributeRef;
      case LanguageConceptSwitch.FilterComment:
        if (props_FilterComment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("//");
          props_FilterComment = cpb.create();
        }
        return props_FilterComment;
      case LanguageConceptSwitch.FilterDef:
        if (props_FilterDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FilterDef");
          props_FilterDef = cpb.create();
        }
        return props_FilterDef;
      case LanguageConceptSwitch.FilterEmptyItem:
        if (props_FilterEmptyItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FilterEmptyItem");
          props_FilterEmptyItem = cpb.create();
        }
        return props_FilterEmptyItem;
      case LanguageConceptSwitch.FilterEmptyRenderingDef:
        if (props_FilterEmptyRenderingDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FilterEmptyRenderingDef");
          props_FilterEmptyRenderingDef = cpb.create();
        }
        return props_FilterEmptyRenderingDef;
      case LanguageConceptSwitch.FormatAbstractItem:
        if (props_FormatAbstractItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_FormatAbstractItem = cpb.create();
        }
        return props_FormatAbstractItem;
      case LanguageConceptSwitch.FormatCommentItem:
        if (props_FormatCommentItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("//");
          props_FormatCommentItem = cpb.create();
        }
        return props_FormatCommentItem;
      case LanguageConceptSwitch.FormatEmptyItem:
        if (props_FormatEmptyItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FormatEmptyItem");
          props_FormatEmptyItem = cpb.create();
        }
        return props_FormatEmptyItem;
      case LanguageConceptSwitch.FormatList:
        if (props_FormatList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FormatList");
          props_FormatList = cpb.create();
        }
        return props_FormatList;
      case LanguageConceptSwitch.FunctionRef:
        if (props_FunctionRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("függvény");
          props_FunctionRef = cpb.create();
        }
        return props_FunctionRef;
      case LanguageConceptSwitch.GroupFunctionRef:
        if (props_GroupFunctionRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("csoport függvény");
          props_GroupFunctionRef = cpb.create();
        }
        return props_GroupFunctionRef;
      case LanguageConceptSwitch.HRRelationFilter:
        if (props_HRRelationFilter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("HR kapcsolat kereső");
          props_HRRelationFilter = cpb.create();
        }
        return props_HRRelationFilter;
      case LanguageConceptSwitch.IAttributeRef:
        if (props_IAttributeRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IAttributeRef = cpb.create();
        }
        return props_IAttributeRef;
      case LanguageConceptSwitch.IMappingDef:
        if (props_IMappingDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IMappingDef = cpb.create();
        }
        return props_IMappingDef;
      case LanguageConceptSwitch.IMappingExpression:
        if (props_IMappingExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IMappingExpression = cpb.create();
        }
        return props_IMappingExpression;
      case LanguageConceptSwitch.IMappingItem:
        if (props_IMappingItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IMappingItem = cpb.create();
        }
        return props_IMappingItem;
      case LanguageConceptSwitch.IParamRef:
        if (props_IParamRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IParamRef = cpb.create();
        }
        return props_IParamRef;
      case LanguageConceptSwitch.IParameterMappingExpression:
        if (props_IParameterMappingExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IParameterMappingExpression = cpb.create();
        }
        return props_IParameterMappingExpression;
      case LanguageConceptSwitch.IParameterMappingItem:
        if (props_IParameterMappingItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IParameterMappingItem = cpb.create();
        }
        return props_IParameterMappingItem;
      case LanguageConceptSwitch.IValueDef:
        if (props_IValueDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IValueDef = cpb.create();
        }
        return props_IValueDef;
      case LanguageConceptSwitch.IXlsAbstractValue:
        if (props_IXlsAbstractValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IXlsAbstractValue = cpb.create();
        }
        return props_IXlsAbstractValue;
      case LanguageConceptSwitch.JSONAbstractItem:
        if (props_JSONAbstractItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_JSONAbstractItem = cpb.create();
        }
        return props_JSONAbstractItem;
      case LanguageConceptSwitch.JSONArray:
        if (props_JSONArray == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("array");
          props_JSONArray = cpb.create();
        }
        return props_JSONArray;
      case LanguageConceptSwitch.JSONDataItem:
        if (props_JSONDataItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Adat elem");
          props_JSONDataItem = cpb.create();
        }
        return props_JSONDataItem;
      case LanguageConceptSwitch.JSONFalse:
        if (props_JSONFalse == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("false");
          props_JSONFalse = cpb.create();
        }
        return props_JSONFalse;
      case LanguageConceptSwitch.JSONMappingValueRef:
        if (props_JSONMappingValueRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x6d9e20901ae69279L, 0x6d9e20901ae6927aL, "value", "", "");
          props_JSONMappingValueRef = cpb.create();
        }
        return props_JSONMappingValueRef;
      case LanguageConceptSwitch.JSONNull:
        if (props_JSONNull == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("null");
          props_JSONNull = cpb.create();
        }
        return props_JSONNull;
      case LanguageConceptSwitch.JSONNumeric:
        if (props_JSONNumeric == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("szám");
          props_JSONNumeric = cpb.create();
        }
        return props_JSONNumeric;
      case LanguageConceptSwitch.JSONObject:
        if (props_JSONObject == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("object");
          props_JSONObject = cpb.create();
        }
        return props_JSONObject;
      case LanguageConceptSwitch.JSONProperty:
        if (props_JSONProperty == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("JSONProperty");
          props_JSONProperty = cpb.create();
        }
        return props_JSONProperty;
      case LanguageConceptSwitch.JSONRenderingDef:
        if (props_JSONRenderingDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("JSON kimenet");
          props_JSONRenderingDef = cpb.create();
        }
        return props_JSONRenderingDef;
      case LanguageConceptSwitch.JSONStringLiteral:
        if (props_JSONStringLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("szöveg");
          props_JSONStringLiteral = cpb.create();
        }
        return props_JSONStringLiteral;
      case LanguageConceptSwitch.JSONTrue:
        if (props_JSONTrue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("true");
          props_JSONTrue = cpb.create();
        }
        return props_JSONTrue;
      case LanguageConceptSwitch.MappingAttributeRef:
        if (props_MappingAttributeRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("mező");
          props_MappingAttributeRef = cpb.create();
        }
        return props_MappingAttributeRef;
      case LanguageConceptSwitch.MappingCommentLine:
        if (props_MappingCommentLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("//");
          props_MappingCommentLine = cpb.create();
        }
        return props_MappingCommentLine;
      case LanguageConceptSwitch.MappingDef:
        if (props_MappingDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MappingDef = cpb.create();
        }
        return props_MappingDef;
      case LanguageConceptSwitch.MappingDefRef:
        if (props_MappingDefRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x26f4b9ad5a1f1af5L, 0x26f4b9ad5a1f1af6L, "mappingDef", "", "");
          props_MappingDefRef = cpb.create();
        }
        return props_MappingDefRef;
      case LanguageConceptSwitch.MappingEmptyItem:
        if (props_MappingEmptyItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MappingEmptyItem");
          props_MappingEmptyItem = cpb.create();
        }
        return props_MappingEmptyItem;
      case LanguageConceptSwitch.MappingNumericLiteral:
        if (props_MappingNumericLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("szám");
          props_MappingNumericLiteral = cpb.create();
        }
        return props_MappingNumericLiteral;
      case LanguageConceptSwitch.MappingParamRef:
        if (props_MappingParamRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("paraméter");
          props_MappingParamRef = cpb.create();
        }
        return props_MappingParamRef;
      case LanguageConceptSwitch.MappingStringLiteral:
        if (props_MappingStringLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("szöveg");
          props_MappingStringLiteral = cpb.create();
        }
        return props_MappingStringLiteral;
      case LanguageConceptSwitch.MappingValueRef:
        if (props_MappingValueRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("mapping mező");
          props_MappingValueRef = cpb.create();
        }
        return props_MappingValueRef;
      case LanguageConceptSwitch.NullLiteral:
        if (props_NullLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("null");
          props_NullLiteral = cpb.create();
        }
        return props_NullLiteral;
      case LanguageConceptSwitch.NumberOfDecimals:
        if (props_NumberOfDecimals == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Tizedesjegyek száma");
          props_NumberOfDecimals = cpb.create();
        }
        return props_NumberOfDecimals;
      case LanguageConceptSwitch.NumericLiteral:
        if (props_NumericLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("szám érték");
          props_NumericLiteral = cpb.create();
        }
        return props_NumericLiteral;
      case LanguageConceptSwitch.ParamAbstractItem:
        if (props_ParamAbstractItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ParamAbstractItem = cpb.create();
        }
        return props_ParamAbstractItem;
      case LanguageConceptSwitch.ParamComment:
        if (props_ParamComment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("//");
          props_ParamComment = cpb.create();
        }
        return props_ParamComment;
      case LanguageConceptSwitch.ParamEmptyLine:
        if (props_ParamEmptyLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ParamEmptyLine");
          props_ParamEmptyLine = cpb.create();
        }
        return props_ParamEmptyLine;
      case LanguageConceptSwitch.ParamItem:
        if (props_ParamItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ParamItem = cpb.create();
        }
        return props_ParamItem;
      case LanguageConceptSwitch.ParamListDef:
        if (props_ParamListDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ParamListDef");
          props_ParamListDef = cpb.create();
        }
        return props_ParamListDef;
      case LanguageConceptSwitch.ParameterFunctionRef:
        if (props_ParameterFunctionRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("függvény");
          props_ParameterFunctionRef = cpb.create();
        }
        return props_ParameterFunctionRef;
      case LanguageConceptSwitch.ParameterMappingDef:
        if (props_ParameterMappingDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ParameterMappingDef = cpb.create();
        }
        return props_ParameterMappingDef;
      case LanguageConceptSwitch.ParameterValueDef:
        if (props_ParameterValueDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ParameterValueDef = cpb.create();
        }
        return props_ParameterValueDef;
      case LanguageConceptSwitch.RenderingDefComment:
        if (props_RenderingDefComment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("//");
          props_RenderingDefComment = cpb.create();
        }
        return props_RenderingDefComment;
      case LanguageConceptSwitch.RenderingList:
        if (props_RenderingList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RenderingList");
          props_RenderingList = cpb.create();
        }
        return props_RenderingList;
      case LanguageConceptSwitch.RenderingStringLiteral:
        if (props_RenderingStringLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("szöveg");
          props_RenderingStringLiteral = cpb.create();
        }
        return props_RenderingStringLiteral;
      case LanguageConceptSwitch.RoundingMethod:
        if (props_RoundingMethod == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Kerekítés típusa");
          props_RoundingMethod = cpb.create();
        }
        return props_RoundingMethod;
      case LanguageConceptSwitch.SourceAbstractCondition:
        if (props_SourceAbstractCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_SourceAbstractCondition = cpb.create();
        }
        return props_SourceAbstractCondition;
      case LanguageConceptSwitch.SourceAbstractItem:
        if (props_SourceAbstractItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_SourceAbstractItem = cpb.create();
        }
        return props_SourceAbstractItem;
      case LanguageConceptSwitch.SourceAbstractValue:
        if (props_SourceAbstractValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_SourceAbstractValue = cpb.create();
        }
        return props_SourceAbstractValue;
      case LanguageConceptSwitch.SourceAttributeRef:
        if (props_SourceAttributeRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("mező");
          props_SourceAttributeRef = cpb.create();
        }
        return props_SourceAttributeRef;
      case LanguageConceptSwitch.SourceComment:
        if (props_SourceComment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("//");
          props_SourceComment = cpb.create();
        }
        return props_SourceComment;
      case LanguageConceptSwitch.SourceCondition:
        if (props_SourceCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("feltétel");
          props_SourceCondition = cpb.create();
        }
        return props_SourceCondition;
      case LanguageConceptSwitch.SourceDateRangeCondition:
        if (props_SourceDateRangeCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("időszak");
          props_SourceDateRangeCondition = cpb.create();
        }
        return props_SourceDateRangeCondition;
      case LanguageConceptSwitch.SourceDef:
        if (props_SourceDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SourceDef = cpb.create();
        }
        return props_SourceDef;
      case LanguageConceptSwitch.SourceEmptyItem:
        if (props_SourceEmptyItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SourceEmptyItem");
          props_SourceEmptyItem = cpb.create();
        }
        return props_SourceEmptyItem;
      case LanguageConceptSwitch.SourceEntityRef:
        if (props_SourceEntityRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SourceEntityRef = cpb.create();
        }
        return props_SourceEntityRef;
      case LanguageConceptSwitch.SourceNumericLiteral:
        if (props_SourceNumericLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("szám");
          props_SourceNumericLiteral = cpb.create();
        }
        return props_SourceNumericLiteral;
      case LanguageConceptSwitch.SourceParamRef:
        if (props_SourceParamRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("paraméter");
          props_SourceParamRef = cpb.create();
        }
        return props_SourceParamRef;
      case LanguageConceptSwitch.SourceStringLiteral:
        if (props_SourceStringLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("szöveg");
          props_SourceStringLiteral = cpb.create();
        }
        return props_SourceStringLiteral;
      case LanguageConceptSwitch.StringLiteral:
        if (props_StringLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("szöveg érték");
          props_StringLiteral = cpb.create();
        }
        return props_StringLiteral;
      case LanguageConceptSwitch.SzamfIdoszakFilter:
        if (props_SzamfIdoszakFilter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Számfejtési időszak");
          props_SzamfIdoszakFilter = cpb.create();
        }
        return props_SzamfIdoszakFilter;
      case LanguageConceptSwitch.SzamfIdoszakFilterItem:
        if (props_SzamfIdoszakFilterItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SzamfIdoszakFilterItem");
          props_SzamfIdoszakFilterItem = cpb.create();
        }
        return props_SzamfIdoszakFilterItem;
      case LanguageConceptSwitch.TXTRenderingDef:
        if (props_TXTRenderingDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Text kimenet");
          props_TXTRenderingDef = cpb.create();
        }
        return props_TXTRenderingDef;
      case LanguageConceptSwitch.Template:
        if (props_Template == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Template = cpb.create();
        }
        return props_Template;
      case LanguageConceptSwitch.TextAlignment:
        if (props_TextAlignment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Szöveg igazítás");
          props_TextAlignment = cpb.create();
        }
        return props_TextAlignment;
      case LanguageConceptSwitch.ThousandSeparator:
        if (props_ThousandSeparator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Ezres elválasztó");
          props_ThousandSeparator = cpb.create();
        }
        return props_ThousandSeparator;
      case LanguageConceptSwitch.TimeFormat:
        if (props_TimeFormat == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Idő formátum");
          props_TimeFormat = cpb.create();
        }
        return props_TimeFormat;
      case LanguageConceptSwitch.ValueDef:
        if (props_ValueDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ValueDef = cpb.create();
        }
        return props_ValueDef;
      case LanguageConceptSwitch.XLSRenderingDef:
        if (props_XLSRenderingDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("XLSX kimenet");
          props_XLSRenderingDef = cpb.create();
        }
        return props_XLSRenderingDef;
      case LanguageConceptSwitch.XMLAttribute:
        if (props_XMLAttribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("XML attribute");
          props_XMLAttribute = cpb.create();
        }
        return props_XMLAttribute;
      case LanguageConceptSwitch.XMLDataItem:
        if (props_XMLDataItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Adat elem");
          props_XMLDataItem = cpb.create();
        }
        return props_XMLDataItem;
      case LanguageConceptSwitch.XMLDocument:
        if (props_XMLDocument == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("XMLDocument");
          props_XMLDocument = cpb.create();
        }
        return props_XMLDocument;
      case LanguageConceptSwitch.XMLElement:
        if (props_XMLElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_XMLElement = cpb.create();
        }
        return props_XMLElement;
      case LanguageConceptSwitch.XMLElementContent:
        if (props_XMLElementContent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_XMLElementContent = cpb.create();
        }
        return props_XMLElementContent;
      case LanguageConceptSwitch.XMLRenderingDef:
        if (props_XMLRenderingDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("XML kimenet");
          props_XMLRenderingDef = cpb.create();
        }
        return props_XMLRenderingDef;
      case LanguageConceptSwitch.XMLValue:
        if (props_XMLValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Érték");
          props_XMLValue = cpb.create();
        }
        return props_XMLValue;
      case LanguageConceptSwitch.XlsRow:
        if (props_XlsRow == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("XlsRow");
          props_XlsRow = cpb.create();
        }
        return props_XlsRow;
      case LanguageConceptSwitch.XlsSection:
        if (props_XlsSection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Szekció");
          props_XlsSection = cpb.create();
        }
        return props_XlsSection;
      case LanguageConceptSwitch.XlsTemplatedRenderingDef:
        if (props_XlsTemplatedRenderingDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Template-es XLS kimenet ");
          props_XlsTemplatedRenderingDef = cpb.create();
        }
        return props_XlsTemplatedRenderingDef;
    }
    return null;
  }
}
