package DataMapping.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.EnumerationDescriptorBase;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import jetbrains.mps.lang.smodel.EnumerationLiteralsIndex;
import java.util.List;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;

public class EnumerationDescriptor_RoundingMethodEnum extends EnumerationDescriptorBase {

  public EnumerationDescriptor_RoundingMethodEnum() {
    super(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x3d4dcd08024530bfL, "RoundingMethodEnum", "r:2d36f7b5-27c5-4304-ac9a-34504b59f0d2(DataMapping.structure)/4417412243801845951");
  }

  private final EnumerationDescriptor.MemberDescriptor myMember_AwayFromZero_0 = new EnumerationDescriptor.MemberDescriptor("AwayFromZero", "Nullától elfelé", 0x3d4dcd08024530c0L, "r:2d36f7b5-27c5-4304-ac9a-34504b59f0d2(DataMapping.structure)/4417412243801845952");
  private final EnumerationDescriptor.MemberDescriptor myMember_ToEven_0 = new EnumerationDescriptor.MemberDescriptor("ToEven", "Párosszám felé", 0x3d4dcd08024530c3L, "r:2d36f7b5-27c5-4304-ac9a-34504b59f0d2(DataMapping.structure)/4417412243801845955");
  private final EnumerationDescriptor.MemberDescriptor myMember_ToNegativeInfinity_0 = new EnumerationDescriptor.MemberDescriptor("ToNegativeInfinity", "Minusz végtelen felé", 0x3d4dcd08024530c7L, "r:2d36f7b5-27c5-4304-ac9a-34504b59f0d2(DataMapping.structure)/4417412243801845959");
  private final EnumerationDescriptor.MemberDescriptor myMember_ToPositiveInfinity_0 = new EnumerationDescriptor.MemberDescriptor("ToPositiveInfinity", "Plusz végtelen felé", 0x3d4dcd08024530ccL, "r:2d36f7b5-27c5-4304-ac9a-34504b59f0d2(DataMapping.structure)/4417412243801845964");
  private final EnumerationDescriptor.MemberDescriptor myMember_ToZero_0 = new EnumerationDescriptor.MemberDescriptor("ToZero", "Nulla felé", 0x3d4dcd08024530d2L, "r:2d36f7b5-27c5-4304-ac9a-34504b59f0d2(DataMapping.structure)/4417412243801845970");

  private final EnumerationLiteralsIndex myIndex = EnumerationLiteralsIndex.build(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x3d4dcd08024530bfL, 0x3d4dcd08024530c0L, 0x3d4dcd08024530c3L, 0x3d4dcd08024530c7L, 0x3d4dcd08024530ccL, 0x3d4dcd08024530d2L);
  private final List<EnumerationDescriptor.MemberDescriptor> myMembers = new EnumerationDescriptorBase.MembersList(myIndex, myMember_AwayFromZero_0, myMember_ToEven_0, myMember_ToNegativeInfinity_0, myMember_ToPositiveInfinity_0, myMember_ToZero_0);

  @Nullable
  @Override
  public EnumerationDescriptor.MemberDescriptor getDefault() {
    return myMember_ToEven_0;
  }

  @NotNull
  @Override
  public List<EnumerationDescriptor.MemberDescriptor> getMembers() {
    return myMembers;
  }

  @Nullable
  @Override
  public EnumerationDescriptor.MemberDescriptor getMember(@Nullable String memberName) {
    if (memberName == null) {
      return null;
    }
    switch (memberName) {
      case "AwayFromZero":
        return myMember_AwayFromZero_0;
      case "ToEven":
        return myMember_ToEven_0;
      case "ToNegativeInfinity":
        return myMember_ToNegativeInfinity_0;
      case "ToPositiveInfinity":
        return myMember_ToPositiveInfinity_0;
      case "ToZero":
        return myMember_ToZero_0;
    }
    return null;
  }

  @Nullable
  @Override
  public EnumerationDescriptor.MemberDescriptor getMember(long idValue) {
    int index = myIndex.index(idValue);
    if (index == -1) {
      return null;
    }
    return myMembers.get(index);
  }
}
