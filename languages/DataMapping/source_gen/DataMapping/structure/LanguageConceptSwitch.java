package DataMapping.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AbstractRenderingDef = 0;
  public static final int AbstractRenderingValue = 1;
  public static final int AttributePairRef = 2;
  public static final int CSVRenderingDef = 3;
  public static final int CharReplacement = 4;
  public static final int DateFilter = 5;
  public static final int DateFilterItem = 6;
  public static final int DateFormat = 7;
  public static final int DecimalSeparator = 8;
  public static final int DescriptionItem = 9;
  public static final int EmptyMappingDef = 10;
  public static final int EmptyValue = 11;
  public static final int FieldLengthItem = 12;
  public static final int FillChar = 13;
  public static final int FilterAbstractItem = 14;
  public static final int FilterAttributeRef = 15;
  public static final int FilterComment = 16;
  public static final int FilterDef = 17;
  public static final int FilterEmptyItem = 18;
  public static final int FilterEmptyRenderingDef = 19;
  public static final int FormatAbstractItem = 20;
  public static final int FormatCommentItem = 21;
  public static final int FormatEmptyItem = 22;
  public static final int FormatList = 23;
  public static final int FunctionRef = 24;
  public static final int GroupFunctionRef = 25;
  public static final int HRRelationFilter = 26;
  public static final int IAttributeRef = 27;
  public static final int IMappingDef = 28;
  public static final int IMappingExpression = 29;
  public static final int IMappingItem = 30;
  public static final int IParamRef = 31;
  public static final int IParameterMappingExpression = 32;
  public static final int IParameterMappingItem = 33;
  public static final int IValueDef = 34;
  public static final int IXlsAbstractValue = 35;
  public static final int JSONAbstractItem = 36;
  public static final int JSONArray = 37;
  public static final int JSONDataItem = 38;
  public static final int JSONFalse = 39;
  public static final int JSONMappingValueRef = 40;
  public static final int JSONNull = 41;
  public static final int JSONNumeric = 42;
  public static final int JSONObject = 43;
  public static final int JSONProperty = 44;
  public static final int JSONRenderingDef = 45;
  public static final int JSONStringLiteral = 46;
  public static final int JSONTrue = 47;
  public static final int MappingAttributeRef = 48;
  public static final int MappingCommentLine = 49;
  public static final int MappingDef = 50;
  public static final int MappingDefRef = 51;
  public static final int MappingEmptyItem = 52;
  public static final int MappingNumericLiteral = 53;
  public static final int MappingParamRef = 54;
  public static final int MappingStringLiteral = 55;
  public static final int MappingValueRef = 56;
  public static final int NullLiteral = 57;
  public static final int NumberOfDecimals = 58;
  public static final int NumericLiteral = 59;
  public static final int ParamAbstractItem = 60;
  public static final int ParamComment = 61;
  public static final int ParamEmptyLine = 62;
  public static final int ParamItem = 63;
  public static final int ParamListDef = 64;
  public static final int ParameterFunctionRef = 65;
  public static final int ParameterMappingDef = 66;
  public static final int ParameterValueDef = 67;
  public static final int RenderingDefComment = 68;
  public static final int RenderingList = 69;
  public static final int RenderingStringLiteral = 70;
  public static final int RoundingMethod = 71;
  public static final int SourceAbstractCondition = 72;
  public static final int SourceAbstractItem = 73;
  public static final int SourceAbstractValue = 74;
  public static final int SourceAttributeRef = 75;
  public static final int SourceComment = 76;
  public static final int SourceCondition = 77;
  public static final int SourceDateRangeCondition = 78;
  public static final int SourceDef = 79;
  public static final int SourceEmptyItem = 80;
  public static final int SourceEntityRef = 81;
  public static final int SourceNumericLiteral = 82;
  public static final int SourceParamRef = 83;
  public static final int SourceStringLiteral = 84;
  public static final int StringLiteral = 85;
  public static final int SzamfIdoszakFilter = 86;
  public static final int SzamfIdoszakFilterItem = 87;
  public static final int TXTRenderingDef = 88;
  public static final int Template = 89;
  public static final int TextAlignment = 90;
  public static final int ThousandSeparator = 91;
  public static final int TimeFormat = 92;
  public static final int ValueDef = 93;
  public static final int XLSRenderingDef = 94;
  public static final int XMLAttribute = 95;
  public static final int XMLDataItem = 96;
  public static final int XMLDocument = 97;
  public static final int XMLElement = 98;
  public static final int XMLElementContent = 99;
  public static final int XMLRenderingDef = 100;
  public static final int XMLValue = 101;
  public static final int XlsRow = 102;
  public static final int XlsSection = 103;
  public static final int XlsTemplatedRenderingDef = 104;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL);
    builder.put(0x2865232644831L, AbstractRenderingDef);
    builder.put(0x41fd2b6fb79774c0L, AbstractRenderingValue);
    builder.put(0x3d4dcd080255f3adL, AttributePairRef);
    builder.put(0x2865232654097L, CSVRenderingDef);
    builder.put(0x3d4dcd080249404cL, CharReplacement);
    builder.put(0x3d4dcd080255c5c7L, DateFilter);
    builder.put(0x3d4dcd08025af678L, DateFilterItem);
    builder.put(0x4f15e479594eb5c8L, DateFormat);
    builder.put(0x4f15e479594ec4d4L, DecimalSeparator);
    builder.put(0x28652325c387aL, DescriptionItem);
    builder.put(0x7bbd02202d497350L, EmptyMappingDef);
    builder.put(0x34e1d43f31ad92bbL, EmptyValue);
    builder.put(0x41fd2b6fb78f79daL, FieldLengthItem);
    builder.put(0x3d4dcd0802470031L, FillChar);
    builder.put(0x3d4dcd08024dd1cdL, FilterAbstractItem);
    builder.put(0x3d4dcd080255a24fL, FilterAttributeRef);
    builder.put(0x3d4dcd080254896cL, FilterComment);
    builder.put(0x3d4dcd08024dce24L, FilterDef);
    builder.put(0x3d4dcd08024dd989L, FilterEmptyItem);
    builder.put(0x21452ef5018de85aL, FilterEmptyRenderingDef);
    builder.put(0x4f15e479594ea64fL, FormatAbstractItem);
    builder.put(0x26879da40ff21928L, FormatCommentItem);
    builder.put(0x26879da40ff212ebL, FormatEmptyItem);
    builder.put(0x4f15e479594ea35cL, FormatList);
    builder.put(0x48a870062c6a80bfL, FunctionRef);
    builder.put(0x666f7cfffc4ea1caL, GroupFunctionRef);
    builder.put(0x3d4dcd0802559c1cL, HRRelationFilter);
    builder.put(0x49a403aa3321cb12L, IAttributeRef);
    builder.put(0x7bbd02202d401301L, IMappingDef);
    builder.put(0x6007094d3dd4c57bL, IMappingExpression);
    builder.put(0x28099d21881a0f44L, IMappingItem);
    builder.put(0x1c06662da7304013L, IParamRef);
    builder.put(0x7bbd02202d6e823eL, IParameterMappingExpression);
    builder.put(0x7bbd02202d69c70eL, IParameterMappingItem);
    builder.put(0x7bbd02202da3d2b6L, IValueDef);
    builder.put(0x34e1d43f3152b70cL, IXlsAbstractValue);
    builder.put(0x59b9768d3a8bccf7L, JSONAbstractItem);
    builder.put(0x59b9768d3a8353cbL, JSONArray);
    builder.put(0x6d9e20901ae527d3L, JSONDataItem);
    builder.put(0x6d9e20901ae8734bL, JSONFalse);
    builder.put(0x6d9e20901ae69279L, JSONMappingValueRef);
    builder.put(0x6d9e20901ae8734dL, JSONNull);
    builder.put(0x6d9e20901ae8734cL, JSONNumeric);
    builder.put(0x6d9e20901ae173bbL, JSONObject);
    builder.put(0x6d9e20901ae173bcL, JSONProperty);
    builder.put(0x59b9768d3a8bca6fL, JSONRenderingDef);
    builder.put(0x6d9e20901ae51d38L, JSONStringLiteral);
    builder.put(0x6d9e20901ae8734aL, JSONTrue);
    builder.put(0x6007094d3dd4cc4cL, MappingAttributeRef);
    builder.put(0x28099d21881a20b2L, MappingCommentLine);
    builder.put(0x28099d21881a0754L, MappingDef);
    builder.put(0x26f4b9ad5a1f1af5L, MappingDefRef);
    builder.put(0x28099d21881a17c1L, MappingEmptyItem);
    builder.put(0x1d814eb9ed781519L, MappingNumericLiteral);
    builder.put(0x774c73f6ce296dcfL, MappingParamRef);
    builder.put(0x1d814eb9ed7661ceL, MappingStringLiteral);
    builder.put(0x41fd2b6fb7964650L, MappingValueRef);
    builder.put(0xe9f1cc367ff1aaL, NullLiteral);
    builder.put(0x3d4dcd0802434595L, NumberOfDecimals);
    builder.put(0x34e1d43f316bfc5dL, NumericLiteral);
    builder.put(0x774c73f6ce229c60L, ParamAbstractItem);
    builder.put(0x774c73f6ce229c63L, ParamComment);
    builder.put(0x774c73f6ce229c64L, ParamEmptyLine);
    builder.put(0x774c73f6ce229c65L, ParamItem);
    builder.put(0x774c73f6ce229c5dL, ParamListDef);
    builder.put(0x7bbd02202d6e823fL, ParameterFunctionRef);
    builder.put(0x7bbd02202d2efecbL, ParameterMappingDef);
    builder.put(0x7bbd02202d7f1985L, ParameterValueDef);
    builder.put(0x21452ef5018de859L, RenderingDefComment);
    builder.put(0x21452ef5018e4e5dL, RenderingList);
    builder.put(0x9878a16eb84d360L, RenderingStringLiteral);
    builder.put(0x3d4dcd0802453113L, RoundingMethod);
    builder.put(0x1c06662da7261880L, SourceAbstractCondition);
    builder.put(0x28099d21881b7891L, SourceAbstractItem);
    builder.put(0x666f7cfffc644c42L, SourceAbstractValue);
    builder.put(0x28099d21881c5a3fL, SourceAttributeRef);
    builder.put(0x28099d21881b8853L, SourceComment);
    builder.put(0x28099d21881b9060L, SourceCondition);
    builder.put(0x1c06662da7261881L, SourceDateRangeCondition);
    builder.put(0x28099d21881b6885L, SourceDef);
    builder.put(0x28099d21881b807fL, SourceEmptyItem);
    builder.put(0x28099d21881b7c6eL, SourceEntityRef);
    builder.put(0x666f7cfffc6d89e4L, SourceNumericLiteral);
    builder.put(0x666f7cfffc633f29L, SourceParamRef);
    builder.put(0x666f7cfffc658f8fL, SourceStringLiteral);
    builder.put(0x34e1d43f316bfc63L, StringLiteral);
    builder.put(0x3d4dcd080255c804L, SzamfIdoszakFilter);
    builder.put(0x3d4dcd0802562d73L, SzamfIdoszakFilterItem);
    builder.put(0x28652326a66d2L, TXTRenderingDef);
    builder.put(0x72160cfe047820e1L, Template);
    builder.put(0x4f15e479594ed084L, TextAlignment);
    builder.put(0x4f15e479594eb9f4L, ThousandSeparator);
    builder.put(0x4f15e479594eb86dL, TimeFormat);
    builder.put(0x28099d21881a135cL, ValueDef);
    builder.put(0x28652327c6757L, XLSRenderingDef);
    builder.put(0x41fd2b6fb78576e1L, XMLAttribute);
    builder.put(0x41fd2b6fb78f5f48L, XMLDataItem);
    builder.put(0x41fd2b6fb785784eL, XMLDocument);
    builder.put(0x41fd2b6fb783d8e3L, XMLElement);
    builder.put(0x41fd2b6fb785869bL, XMLElementContent);
    builder.put(0xd79bf50eebc843dL, XMLRenderingDef);
    builder.put(0x9878a16eb850508L, XMLValue);
    builder.put(0x34e1d43f312686c1L, XlsRow);
    builder.put(0x34e1d43f312686c0L, XlsSection);
    builder.put(0x3ea79a81326d93ccL, XlsTemplatedRenderingDef);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
