package DataMapping.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AttributePairRef_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new CSVRenderingDef_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new CharReplacement_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new DateFilter_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new DateFilterItem_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new DateFormat_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new DecimalSeparator_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new DescriptionItem_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new EmptyMappingDef_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new EmptyValue_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new FieldLengthItem_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new FillChar_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new FilterComment_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new FilterDef_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new FilterEmptyItem_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new FilterEmptyRenderingDef_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new FormatCommentItem_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new FormatEmptyItem_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new FormatList_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new FunctionRef_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new GroupFunctionRef_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new HRRelationFilter_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new IAttributeRef_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new IParamRef_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new JSONArray_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new JSONDataItem_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new JSONFalse_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new JSONMappingValueRef_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new JSONNull_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new JSONNumeric_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new JSONObject_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new JSONProperty_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new JSONRenderingDef_Editor());
      case 33:
        return Collections.<ConceptEditor>singletonList(new JSONTrue_Editor());
      case 34:
        return Collections.<ConceptEditor>singletonList(new MappingCommentLine_Editor());
      case 35:
        return Collections.<ConceptEditor>singletonList(new MappingDef_Editor());
      case 36:
        return Collections.<ConceptEditor>singletonList(new MappingDefRef_Editor());
      case 37:
        return Collections.<ConceptEditor>singletonList(new MappingEmptyItem_Editor());
      case 38:
        return Collections.<ConceptEditor>singletonList(new MappingValueRef_Editor());
      case 39:
        return Collections.<ConceptEditor>singletonList(new NullLiteral_Editor());
      case 40:
        return Collections.<ConceptEditor>singletonList(new NumberOfDecimals_Editor());
      case 41:
        return Collections.<ConceptEditor>singletonList(new ParamComment_Editor());
      case 42:
        return Collections.<ConceptEditor>singletonList(new ParamEmptyLine_Editor());
      case 43:
        return Collections.<ConceptEditor>singletonList(new ParamItem_Editor());
      case 44:
        return Collections.<ConceptEditor>singletonList(new ParamListDef_Editor());
      case 45:
        return Collections.<ConceptEditor>singletonList(new ParameterFunctionRef_Editor());
      case 46:
        return Collections.<ConceptEditor>singletonList(new ParameterMappingDef_Editor());
      case 47:
        return Collections.<ConceptEditor>singletonList(new ParameterValueDef_Editor());
      case 48:
        return Collections.<ConceptEditor>singletonList(new RenderingDefComment_Editor());
      case 49:
        return Collections.<ConceptEditor>singletonList(new RenderingList_Editor());
      case 50:
        return Collections.<ConceptEditor>singletonList(new RoundingMethod_Editor());
      case 51:
        return Collections.<ConceptEditor>singletonList(new SourceComment_Editor());
      case 52:
        return Collections.<ConceptEditor>singletonList(new SourceCondition_Editor());
      case 53:
        return Collections.<ConceptEditor>singletonList(new SourceDateRangeCondition_Editor());
      case 54:
        return Collections.<ConceptEditor>singletonList(new SourceDef_Editor());
      case 55:
        return Collections.<ConceptEditor>singletonList(new SourceEmptyItem_Editor());
      case 56:
        return Collections.<ConceptEditor>singletonList(new SourceEntityRef_Editor());
      case 57:
        return Collections.<ConceptEditor>singletonList(new SzamfIdoszakFilter_Editor());
      case 58:
        return Collections.<ConceptEditor>singletonList(new SzamfIdoszakFilterItem_Editor());
      case 59:
        return Collections.<ConceptEditor>singletonList(new TXTRenderingDef_Editor());
      case 60:
        return Collections.<ConceptEditor>singletonList(new Template_Editor());
      case 61:
        return Collections.<ConceptEditor>singletonList(new TextAlignment_Editor());
      case 62:
        return Collections.<ConceptEditor>singletonList(new ThousandSeparator_Editor());
      case 63:
        return Collections.<ConceptEditor>singletonList(new TimeFormat_Editor());
      case 64:
        return Collections.<ConceptEditor>singletonList(new ValueDef_Editor());
      case 65:
        return Collections.<ConceptEditor>singletonList(new XLSRenderingDef_Editor());
      case 66:
        return Collections.<ConceptEditor>singletonList(new XMLAttribute_Editor());
      case 67:
        return Collections.<ConceptEditor>singletonList(new XMLDataItem_Editor());
      case 68:
        return Collections.<ConceptEditor>singletonList(new XMLDocument_Editor());
      case 69:
        return Collections.<ConceptEditor>singletonList(new XMLElement_Editor());
      case 70:
        return Collections.<ConceptEditor>singletonList(new XMLRenderingDef_Editor());
      case 71:
        return Collections.<ConceptEditor>singletonList(new XMLValue_Editor());
      case 72:
        return Collections.<ConceptEditor>singletonList(new XlsRow_Editor());
      case 73:
        return Collections.<ConceptEditor>singletonList(new XlsSection_Editor());
      case 74:
        return Collections.<ConceptEditor>singletonList(new XlsTemplatedRenderingDef_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_0(String editorComponentId) {
    if ("DataMapping.editor.MappingDefHeader".equals(editorComponentId)) {
      return Collections.singletonList(new MappingDefHeader());
    }
    return Collections.emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_1(String editorComponentId) {
    if ("DataMapping.editor.ParameterMappingHeader".equals(editorComponentId)) {
      return Collections.singletonList(new ParameterMappingHeader());
    }
    return Collections.emptyList();
  }
  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return getDeclaredEC_0(editorComponentId);
      case 1:
        return getDeclaredEC_1(editorComponentId);
      default:
    }
    return Collections.emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new EmptyMappingDef_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new FilterEmptyItem_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new FilterEmptyRenderingDef_SubstituteMenu());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new FormatEmptyItem_SubstituteMenu());
      case 4:
        return Collections.<SubstituteMenu>singletonList(new JSONMappingValueRef_SubstituteMenu());
      case 5:
        return Collections.<SubstituteMenu>singletonList(new MappingDefRef_SubstituteMenu());
      case 6:
        return Collections.<SubstituteMenu>singletonList(new MappingEmptyItem_SubstituteMenu());
      case 7:
        return Collections.<SubstituteMenu>singletonList(new ParamEmptyLine_SubstituteMenu());
      case 8:
        return Collections.<SubstituteMenu>singletonList(new SourceEmptyItem_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x3d4dcd080255f3adL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x2865232654097L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x3d4dcd080249404cL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x3d4dcd080255c5c7L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x3d4dcd08025af678L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x4f15e479594eb5c8L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x4f15e479594ec4d4L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x28652325c387aL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x7bbd02202d497350L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x34e1d43f31ad92bbL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x41fd2b6fb78f79daL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x3d4dcd0802470031L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x3d4dcd080254896cL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x3d4dcd08024dce24L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x3d4dcd08024dd989L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x21452ef5018de85aL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x26879da40ff21928L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x26879da40ff212ebL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x4f15e479594ea35cL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x48a870062c6a80bfL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x666f7cfffc4ea1caL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x3d4dcd0802559c1cL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x49a403aa3321cb12L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x1c06662da7304013L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x59b9768d3a8353cbL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x6d9e20901ae527d3L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x6d9e20901ae8734bL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x6d9e20901ae69279L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x6d9e20901ae8734dL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x6d9e20901ae8734cL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x6d9e20901ae173bbL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x6d9e20901ae173bcL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x59b9768d3a8bca6fL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x6d9e20901ae8734aL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x28099d21881a20b2L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x28099d21881a0754L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x26f4b9ad5a1f1af5L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x28099d21881a17c1L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x41fd2b6fb7964650L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0xe9f1cc367ff1aaL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x3d4dcd0802434595L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x774c73f6ce229c63L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x774c73f6ce229c64L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x774c73f6ce229c65L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x774c73f6ce229c5dL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x7bbd02202d6e823fL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x7bbd02202d2efecbL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x7bbd02202d7f1985L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x21452ef5018de859L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x21452ef5018e4e5dL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x3d4dcd0802453113L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x28099d21881b8853L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x28099d21881b9060L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x1c06662da7261881L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x28099d21881b6885L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x28099d21881b807fL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x28099d21881b7c6eL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x3d4dcd080255c804L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x3d4dcd0802562d73L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x28652326a66d2L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x72160cfe047820e1L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x4f15e479594ed084L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x4f15e479594eb9f4L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x4f15e479594eb86dL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x28099d21881a135cL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x28652327c6757L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x41fd2b6fb78576e1L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x41fd2b6fb78f5f48L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x41fd2b6fb785784eL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x41fd2b6fb783d8e3L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0xd79bf50eebc843dL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x9878a16eb850508L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x34e1d43f312686c1L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x34e1d43f312686c0L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x3ea79a81326d93ccL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x28099d21881a0754L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x7bbd02202d2efecbL)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x7bbd02202d497350L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x3d4dcd08024dd989L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x21452ef5018de85aL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x26879da40ff212ebL), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x6d9e20901ae69279L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x26f4b9ad5a1f1af5L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x28099d21881a17c1L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x774c73f6ce229c64L), MetaIdFactory.conceptId(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x28099d21881b807fL)).seal();
}
