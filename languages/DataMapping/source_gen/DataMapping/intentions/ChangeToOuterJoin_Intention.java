package DataMapping.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SProperty;

public final class ChangeToOuterJoin_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public ChangeToOuterJoin_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:c8076724-ef3c-4ab0-90a7-fe61842d0d9d(DataMapping.intentions)", "7786400292838906172"));
  }

  @Override
  public String getPresentation() {
    return "ChangeToOuterJoin";
  }

  @Override
  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }

    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Módosítás outer join-ra";
    }

    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SPropertyOperations.assignEnum(node, PROPS.joinType$Kzsg, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x6c0ed9cfeda82cccL, "DataMapping.structure.JoinType"), 0x6c0ed9cfeda82ccdL, "LeftOuter"));
    }

    @Override
    public boolean isApplicable(final SNode node, final EditorContext editorContext) {
      if (!(isApplicableToNode(node, editorContext))) {
        return false;
      }
      return true;
    }

    private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
      return (SNodeOperations.getPrevSibling(node) != null) && (SPropertyOperations.getEnum(node, PROPS.joinType$Kzsg) != SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x6c0ed9cfeda82cccL, "DataMapping.structure.JoinType"), 0x6c0ed9cfeda82ccdL, "LeftOuter"));
    }


    @Override
    public IntentionDescriptor getDescriptor() {
      return ChangeToOuterJoin_Intention.this;
    }

  }

  private static final class PROPS {
    /*package*/ static final SProperty joinType$Kzsg = MetaAdapterFactory.getProperty(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x28099d21881b7c6eL, 0x6c0ed9cfeda82cd2L, "joinType");
  }
}
