package DataMapping.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public final class AddCondition_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public AddCondition_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:c8076724-ef3c-4ab0-90a7-fe61842d0d9d(DataMapping.intentions)", "4260352579491561928"));
  }

  @Override
  public String getPresentation() {
    return "AddCondition";
  }

  @Override
  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }

    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Feltétel hozzáadása";
    }

    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SLinkOperations.addNewChild(node, LINKS.conditions$jbZv, CONCEPTS.SourceAbstractCondition$sr);
    }

    @Override
    public boolean isApplicable(final SNode node, final EditorContext editorContext) {
      return true;
    }



    @Override
    public IntentionDescriptor getDescriptor() {
      return AddCondition_Intention.this;
    }

  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink conditions$jbZv = MetaAdapterFactory.getContainmentLink(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x28099d21881b7c6eL, 0x28099d21882d5adfL, "conditions");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept SourceAbstractCondition$sr = MetaAdapterFactory.getConcept(0x22a6c585e3ba46bcL, 0x922caa7eb0f6869bL, 0x1c06662da7261880L, "DataMapping.structure.SourceAbstractCondition");
  }
}
